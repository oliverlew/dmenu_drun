#!/usr/bin/env python
# Ref: https://specifications.freedesktop.org/desktop-entry-spec
import os
import argparse
from subprocess import run, PIPE
from xdg import BaseDirectory, DesktopEntry

categories = [
    "AudioVideo",
    "Audio",
    "Video",
    "Development",
    "Education",
    "Game",
    "Graphics",
    "Network",
    "Office",
    "Science",
    "Settings",
    "System",
    "Utility",
]


def get_args():
    parser = argparse.ArgumentParser(
            description='Use dmenu to launch desktop applications',
            epilog='Note: Other than the options described here, all the dmenu '
            'options can be passed to dmenu_drun as well, especially if the '
            'dmenu arguments have spaces. "-d" option is only recommended to '
            'specify dmenu alternatives like rofi.')
    parser.add_argument('-c', '--categories', action='store_true',
                        help='Show main category names')
    parser.add_argument('-C', '--all-categories', action='store_true',
                        help='Show all category names')
    parser.add_argument('-d', '--dmenu', metavar='dmenu_cmd',
                        default='dmenu -i -l 10 -p drun',
                        help='Customize dmenu command, default is %(default)s')
    parser.add_argument('-e', '--xdg-de', action='store_true',
                        help='Show apps for specific desktop environments')
    parser.add_argument('-g', '--generic-name', action='store_true',
                        help='Show generic name for apps')
    parser.add_argument('-k', '--keywords', action='store_true',
                        help='Show keywords')
    parser.add_argument('-N', '--dry-run', action='store_true',
                        help='Do not run app, output to stdout')
    parser.add_argument('-t', '--terminal', metavar='terminal',
                        default='xterm',
                        help='Terminal emulator to use, default is %(default)s')
    parser.add_argument('-x', '--executable', action='store_true',
                        help='Show executable name')
    parser.add_argument('-X', '--fullcmd', action='store_true',
                        help='Show command line')
    return parser.parse_known_args()


def get_apps():
    apps = {}
    for data_dir in BaseDirectory.xdg_data_dirs:
        app_dir = os.path.join(data_dir, 'applications')
        if not os.path.exists(app_dir) or not os.path.isdir(app_dir):
            continue

        # Desktop entry files can be in nested directories
        for root, dirs, files in os.walk(app_dir):
            for name in files:
                if not name.endswith('.desktop'):
                    continue

                app = os.path.join(root, name)
                app_id = os.path.relpath(app, app_dir).replace('/', '-')

                # Apps with the same id, choose the first
                if apps.get(app_id) is None:
                    apps[app_id] = app
    return apps.values()


def if_show(entry):
    if entry.getType() != "Application":
        return False
    if entry.getNoDisplay() or entry.getHidden():
        return False
    if entry.getTryExec() and entry.findTryExec() is None:
        return False
    if set(entry.getNotShowIn()).intersection(current_desktops):
        return False
    OnlyShowIn = entry.getOnlyShowIn()
    if OnlyShowIn and not set(OnlyShowIn).intersection(current_desktops):
        return False
    if entry.getExec() is None:
        return False
    return True


def add_entry(entry):
    Exec = entry.getExec()
    Icon = entry.getIcon()
    Name = entry.getName()
    Path = entry.getPath()
    Keys = entry.getKeywords()
    Terminal = entry.getTerminal()
    GenericName = entry.getGenericName()
    Categories = entry.getCategories()

    line = Name
    if GenericName and args.generic_name:
        line += f" ({GenericName})"
    if Categories:
        if args.all_categories:
            line += " @{category}".format(category=';'.join(Categories))
        elif args.categories:
            category = [c for c in Categories if c in categories][0]
            line += f" @{category}"
    if Exec:
        exe = Exec.split()[0].split('/')[-1]
        cmd = Exec.replace(' %f', '') \
                  .replace(' %F', '') \
                  .replace(' %u', '') \
                  .replace(' %U', '') \
                  .replace('%c', Name) \
                  .replace('%k', Path)
        if Icon:
            cmd = cmd.replace('%i', f"--icon {Icon}")
        if Terminal:
            cmd = f"{args.terminal} -e {cmd}"

        if args.fullcmd:
            line += f" ${cmd}"
        elif args.executable:
            line += f" ${exe}"
    if Keys and args.keywords:
        line += " #{keys}".format(keys=';'.join(Keys))
    if Icon and args.dmenu.startswith("rofi"):
        line += f"\0icon\x1f{Icon}"

    return {line: cmd}


if __name__ == '__main__':
    current_desktops = set(os.getenv('XDG_CURRENT_DESKTOP', '').split(':'))

    args, dmenu_args = get_args()
    dmenu_cmd = args.dmenu.split()
    dmenu_cmd.extend(dmenu_args)

    cmds = {}
    for app in get_apps():
        entry = DesktopEntry.DesktopEntry(app)
        if if_show(entry):
            cmds.update(add_entry(entry))
    lines = '\n'.join(sorted(cmds.keys()))

    result = run(dmenu_cmd, input=lines, stdout=PIPE, encoding='utf-8')
    command = cmds[result.stdout[:-1]]

    if args.dry_run:
        print(command)
    elif result.stdout != '':
        run(command, shell=True)

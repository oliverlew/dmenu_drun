#!/usr/bin/env python
# Ref: https://specifications.freedesktop.org/desktop-entry-spec
import os
import argparse
from subprocess import run, PIPE
from xdg import BaseDirectory, DesktopEntry


def get_args():
    parser = argparse.ArgumentParser(
            description='Use dmenu to launch desktop applications',
            epilog='Note: Other than the options described here, all the dmenu '
            'options can be passed to dmenu_drun as well, especially if the '
            'dmenu arguments have spaces. "-d" option is only recommended to '
            'specify dmenu alternatives like rofi.')
    parser.add_argument('-c', '--categories', action='store_true',
                        help='Show category names')
    parser.add_argument('-x', '--executable', action='store_true',
                        help='Show command line')
    parser.add_argument('-g', '--generic-name', action='store_true',
                        help='Show generic name for apps')
    parser.add_argument('-N', '--dry-run', action='store_true',
                        help='Do not run app, output to stdout')
    parser.add_argument('-e', '--xdg-de', action='store_true',
                        help='Show apps for specific desktop environments')
    parser.add_argument('-d', '--dmenu', metavar='dmenu_cmd',
                        default='dmenu -i -l 10 -p drun',
                        help='Customize dmenu command, default is %(default)s')
    parser.add_argument('-t', '--terminal', metavar='terminal',
                        default='xterm',
                        help='Terminal emulator to run text based programs, '
                        'default is %(default)s')
    return parser.parse_known_args()


def get_apps():
    apps = {}
    for data_dir in BaseDirectory.xdg_data_dirs:
        app_dir = os.path.join(data_dir, 'applications')
        if not os.path.exists(app_dir) or not os.path.isdir(app_dir):
            continue

        # Desktop entry files can be in nested directories
        for root, dirs, files in os.walk(app_dir):
            for name in files:
                if not name.endswith('.desktop'):
                    continue

                app = os.path.join(root, name)
                app_id = os.path.relpath(app, app_dir).replace('/', '-')

                # Apps with the same id, choose the first
                if apps.get(app_id) is None:
                    apps[app_id] = app
    return apps.values()


def if_show(entry):
    if entry.getNoDisplay():
        return False
    if entry.getTryExec() and entry.findTryExec() is None:
        return False
    if set(entry.getNotShowIn()).intersection(current_desktops):
        return False
    OnlyShowIn = entry.getOnlyShowIn()
    if OnlyShowIn and not set(OnlyShowIn).intersection(current_desktops):
        return False
    if entry.getExec() is None:
        return False
    return True


def add_entry(entry):
    Exec = entry.getExec()
    Icon = entry.getIcon()
    Name = entry.getName()
    Terminal = entry.getTerminal()
    GenericName = entry.getGenericName()
    Categories = entry.getCategories()

    line = Name

    if GenericName and args.generic_name:
        line += " ({generic_name})".format(generic_name=GenericName)

    if Categories and args.categories:
        line += " #{category}".format(category=';'.join(Categories))

    cmd = Exec.replace(' %f', '') \
              .replace(' %F', '') \
              .replace(' %u', '') \
              .replace(' %U', '') \
              .replace('%c', Name) \
              .replace('%k', entry.getPath())

    if Icon:
        cmd = cmd.replace('%i', "--icon {icon}".format(icon=Icon))

    if Terminal:
        cmd = "{terminal} -e {cmd}".format(terminal=args.terminal, cmd=cmd)

    if args.executable:
        line += " $" + cmd

    if Icon and args.dmenu.startswith("rofi"):
        line += f"\0icon\x1f{Icon}"

    return {line: cmd}


if __name__ == '__main__':
    current_desktops = set(os.getenv('XDG_CURRENT_DESKTOP', '').split(':'))

    args, dmenu_args = get_args()
    dmenu_cmd = args.dmenu.split()
    dmenu_cmd.extend(dmenu_args)

    cmds = {}
    for app in get_apps():
        entry = DesktopEntry.DesktopEntry(app)
        if if_show(entry):
            cmds.update(add_entry(entry))
    lines = '\n'.join(sorted(cmds.keys()))

    result = run(dmenu_cmd, input=lines, stdout=PIPE, encoding='utf-8')

    if args.dry_run:
        print(result.stdout.strip())
    elif result.stdout != '':
        run(cmds[result.stdout[:-1]], shell=True)
